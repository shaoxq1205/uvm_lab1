// SV Clock Driver Generated by SV Builder 2.9.6.

`timescale 1 ns / 1 ns


//________________________________________________________________________
//________________________________________________________________________
//  Qualcomm Proprietary
//  Copyright (c) Qualcomm Inc.
//  All rights reserved.
//
//
// All data and information contained in or disclosed by this document
// are confidential and proprietary information of QUALCOMM Incorporated,
// and all rights therein are expressly reserved. By accepting this
// material, the recipient agrees that this material and the information
// contained therein are held in confidence and in trust and will not be
// used, copied, reproduced in whole or in part, nor its contents
// revealed in any manner to others without the express written
// permission of QUALCOMM Incorporated.
//
// This technology was exported from the United States in accordance with
// the Export Administration Regulations. Diversion contrary to U.S. law
// prohibited.
//________________________________________________________________________
//________________________________________________________________________


/**
 * @brief implementation for Programmable Clock components
 *
 * @file   ClkRstDriver.sv 
 * @author Logie Ramachandran
 * @date   04/05/2010
 *
 */

//________________________________________________________________________
//________________________________________________________________________
//
//                    Module ClkRstDriver: default constructor
//
// Description 
// ----------- 
//               This is the top level module for the programmable clock
//               driver.  This module should be instantiated at the top
//               level of the design and the outtputs connected to the clock
//               and reset inputs of the DUT.  This module instantiates
//               ResetGenerator and ClockAdvancer from the Sim Accel library
//           
//
// Ports
// ------
//   clock:      This is the free running ungated clock signal.
//               This signal can be used to drive the DUT clock if clock
//               gating is not required. This clock signal can also be used
//               as systemClock for Vera.
//               Since the clock generator is programmable, the generated
//               clock frequency depends on the hi_period and lo_period
//               values programmed by the user
//
//   gclock:       This is the gated clock generated by the ClkRstDriver module.
//               This signal should be connected to the clock inputs of DUT.
//               Since this signal is a gated clock, do not use this to drive
//               the Vera System Clock
//   reset:      The reset signal goes active for an initial number of clock
//               cycles. This number is based on the module parameter
//               "NUM_RESET_CYCLES"
//               
// Parameters
// ----------
//   CLK_INITIAL_VALUE  
//               This parameter determines the initial value of the
//               generated clock signal. If this value is set to 1 the initial
//               value of the clk signal is "1",  else it is "0".
//
//   NUM_RESET_CYCLES  
//               This parameter determines the number of cycles the reset is
//               active. Set this parameter to an integer value that represents
//               number of cycles during which reset is active. Use this parameter
//               along with "RESET_ACTIVE_LOW" to control the reset generated
//               by this module. 
//
//   RESET_ACTIVE_LOW
//               This parameter specifies whether the reset signal is active low
//               or active high. Use this parameter along with "NUM_RESET_CYCLES"
//               to control the reset generated by this module 
//
//   CLK_INITIAL_LO
//               This parameter specifies thie initial lo_period for the generated
//               clock. This parameter along with CLK_INITIAL_HI specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_HI
//               This parameter specifies thie initial hi_period for the generated
//               clock. This parameter along with CLK_INITIAL_LO specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_OFFSET
//               This parameter specifies thie initial delay in the clock before the 
//               clock begins its osciallation. 
//________________________________________________________________________
//________________________________________________________________________

module ClkRstDriver (output reg clock, output reg gclock, output reg reset);
// pragma attribute ClkRstDriver partition_module_xrtl
   parameter CLK_INITIAL_VALUE = 0;
   parameter NUM_RESET_CYCLES = 20;
   parameter CLK_INITIAL_HI = 20;
   parameter CLK_INITIAL_LO = 30;
   parameter CLK_INITIAL_OFFSET = 30;
   parameter RESET_ACTIVE_LOW = 1;

   logic internalFreeClk;
   logic internalGatedClk;
   logic internalReset;
   
   assign gclock = internalGatedClk;
   assign clock = internalFreeClk;

   XlClockAdvancer clockAdvancer (internalFreeClk);
   XlResetGenerator    #(NUM_RESET_CYCLES) resetGenerator(internalGatedClk, internalReset);
   ProgClockGater clkGater(internalFreeClk, internalGatedClk);

   generate
      if (CLK_INITIAL_VALUE == 0) begin: p1
	 if (CLK_INITIAL_OFFSET == 0) begin: clkDriver	
	    ProgClkDriver_INIT0_WithoutInitialDelay #(CLK_INITIAL_OFFSET, CLK_INITIAL_LO, CLK_INITIAL_HI) i1 (internalFreeClk);
	 end
	 else begin: clkDriver	
	   ProgClkDriver_INIT0_WithInitialDelay #(CLK_INITIAL_OFFSET, CLK_INITIAL_LO, CLK_INITIAL_HI) i1 (internalFreeClk);
	 end
      end
   endgenerate


   generate
      if(RESET_ACTIVE_LOW == 1)
	assign reset = internalReset;
      else
	assign reset = ~internalReset;
   endgenerate
   
endmodule // ClkRstDriver


//________________________________________________________________________
//________________________________________________________________________
//
//          module ProgClkDriver_INIT0_WithInitialDelay(output reg hclk );
//
// Description 
// ----------- 
//               This module is instiated by the ClkRstDriver module. 
//               This is pgorammable clock driver where the initial
//               value is 0. 
//           
//
// Ports
// ------
//   hclk:       This is the free running ungated clock signal generated
//               by this module. 
//
//               
// Parameters
// ----------
//
//   CLK_INITIAL_LO
//               This parameter specifies thie initial lo_period for the generated
//               clock. This parameter along with CLK_INITIAL_HI specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_HI
//               This parameter specifies thie initial hi_period for the generated
//               clock. This parameter along with CLK_INITIAL_LO specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_OFFSET
//               This parameter specifies thie initial delay in the clock before the 
//               clock begins its osciallation.
//
// Programmable API:
// -----------------
//   function void v_setClockPeriod (input int hi, input int lo);
//               This API function can be called from external C function
//               and can be used to set the low time and hi time of the generated
//               clock signal. The parametes of this function are:
//                  (a) input int hi - Specify the hi time
//                  (b) input int lo - Specify the lo time
//________________________________________________________________________
//________________________________________________________________________



module ProgClkDriver_INIT0_WithInitialDelay(output reg hclk );
// pragma attribute ProgClkDriver_INIT0_WithInitialDelay partition_module_xrtl   
   parameter      CLK_INITIAL_OFFSET = 1;            
   parameter      CLK_INITIAL_LO = 20;
   parameter      CLK_INITIAL_HI = 20;   

   shortint 	   unsigned X = CLK_INITIAL_HI;
   shortint 	   unsigned Y = CLK_INITIAL_LO;
   reg             internalClk = 0;

   assign hclk = internalClk;      
//tbx clkgen   
   initial 
     begin
      internalClk = 0;
      #(CLK_INITIAL_OFFSET);
      forever begin
	 internalClk = 1;
	 #(X);
	 internalClk = 0;
	 #(Y);
      end
     end // initial begin

   export "DPI-C" function v_setClockPeriod;
   function void v_setClockPeriod (input int hi, input int lo);
      begin
	 if(hi+lo > CLK_INITIAL_HI+CLK_INITIAL_LO) begin
	    X <= hi;
	    Y <= lo;	 
	    $display($time,, "Setting Clk Intervals to %d  %d\n", hi, lo);
	 end
	 else
	   $display($time,, "Ignoring  Clk Intervals request for %d  %d\n", hi, lo);
      end
   endfunction //

endmodule // ClockDriverSub


//________________________________________________________________________
//________________________________________________________________________
//
//          module ProgClkDriver_INIT0_WithoutInitialDelay(output reg hclk );
//
// Description 
// ----------- 
//               This module is instiated by the ClkRstDriver module. 
//               This is pgorammable clock driver where the initial
//               value is 0. The initial clock delay is also zero. This
//               implies that the clock oscillations start from time 0. 
//           
//
// Ports
// ------
//   hclk:       This is the free running ungated clock signal generated
//               by this module. 
//
//               
// Parameters
// ----------
//
//   CLK_INITIAL_LO
//               This parameter specifies thie initial lo_period for the generated
//               clock. This parameter along with CLK_INITIAL_HI specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_HI
//               This parameter specifies thie initial hi_period for the generated
//               clock. This parameter along with CLK_INITIAL_LO specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_OFFSET
//               This parameter is ignored by the module. It only exists to maintain
//               consistency with other moduels in this library
//
// Programmable API:
// -----------------
//   function void v_setClockPeriod (input int hi, input int lo);
//               This API function can be called from external C function
//               and can be used to set the low time and hi time of the generated
//               clock signal. The parametes of this function are:
//                  (a) input int hi - Specify the hi time
//                  (b) input int lo - Specify the lo time
//________________________________________________________________________
//________________________________________________________________________





module ProgClkDriver_INIT0_WithoutInitialDelay(output reg hclk );
// pragma attribute ProgClkDriver_INIT0_WithoutInitialDelay partition_module_xrtl      
   parameter      CLK_INITIAL_OFFSET = 0;            
   parameter      CLK_INITIAL_LO = 20;
   parameter      CLK_INITIAL_HI = 20;   

   shortint 	   unsigned X = CLK_INITIAL_HI;
   shortint 	   unsigned Y = CLK_INITIAL_LO;
   reg             internalClk = 0;

   assign hclk = internalClk;   
//tbx clkgen      	      
   initial begin
      forever begin
	 internalClk = 0;
	 #(Y);
	 internalClk = 1;
	 #(X);
      end
   end

   export "DPI-C" function v_setClockPeriod;
   function void v_setClockPeriod (input int hi, input int lo);
      begin
	 if(hi+lo > CLK_INITIAL_HI+CLK_INITIAL_LO) begin	    
	    X <= hi;
	    Y <= lo;	 
	    $display($time,, "Setting Clk Intervals to %d  %d\n", hi, lo);
	 end
	 else
	   $display($time,, "Ignoring  Clk Intervals request for %d  %d\n", hi, lo);
      end
   endfunction //

   
endmodule // ClockDriverSub



//________________________________________________________________________
//________________________________________________________________________
//
//          module ProgClkDriver(output reg hclk );
//
// Description 
// ----------- 
//               This module is instantiated for  PALLADIUM. 
//               The INITIAL VALUE and INITIAL_DELAY are parameterizeable
//               on the Palladium

//
// Ports
// ------
//   hclk:       This is the free running ungated clock signal generated
//               by this module. 
//
//               
// Parameters
// ----------
//
//   CLK_INITIAL_VALUE  
//               This parameter determines the initial value of the
//               generated clock signal. If this value is set to 1 the initial
//               value of the clk signal is "1",  else it is "0".
//
//   CLK_INITIAL_LO
//               This parameter specifies thie initial lo_period for the generated
//               clock. This parameter along with CLK_INITIAL_HI specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_HI
//               This parameter specifies thie initial hi_period for the generated
//               clock. This parameter along with CLK_INITIAL_LO specifies the 
//               clock period of the dssign. However the clock period can be programmed
//               by the using the API provided with this module
// 
//   CLK_INITIAL_OFFSET
//               This parameter specifies thie initial delay in the clock before the 
//               clock begins its osciallation.
//
// Programmable API:
// -----------------
//   function void v_setClockPeriod (input int hi, input int lo);
//               This API function can be called from external C function
//               and can be used to set the low time and hi time of the generated
//               clock signal. The parametes of this function are:
//                  (a) input int hi - Specify the hi time
//                  (b) input int lo - Specify the lo time
//________________________________________________________________________
//________________________________________________________________________



module ProgClkDriver(output reg hclk );
   parameter      CLK_INITIAL_VALUE = 0;            
   parameter      CLK_INITIAL_OFFSET = 1;            
   parameter      CLK_INITIAL_LO = 20;
   parameter      CLK_INITIAL_HI = 20;   

   shortint 	   unsigned X = CLK_INITIAL_HI;
   shortint 	   unsigned Y = CLK_INITIAL_LO;

   bit internalClk = CLK_INITIAL_VALUE;
   assign hclk = internalClk;      


   int d = CLK_INITIAL_OFFSET;
   always   #d begin d = internalClk ? X : Y; internalClk = ~internalClk; end

  export "DPI-C" function v_setClockPeriod;
   function void v_setClockPeriod (input int hi, input int lo);
      begin
	 if(hi+lo > CLK_INITIAL_HI+CLK_INITIAL_LO) begin
	    X <= hi;
	    Y <= lo;	 
	    $display($time,, "Setting Clk Intervals to %d  %d\n", hi, lo);
	 end
	 else
	   $display($time,, "Ignoring  Clk Intervals request for %d  %d\n", hi, lo);
      end
   endfunction //

`ifdef AXIS
   initial $ixc_ctrl("map_delays");
`endif

endmodule // ClockDriverSub



//________________________________________________________________________
//________________________________________________________________________
//
//             module ProgClockGater(input hclk, output oclk);
//
// Description 
// ----------- 
//               This module is instiated by the ClkRstDriver module. 
//               This module manages clock gating. The clock gating
///              can be adjusted using the extenral API.
//           
//
// Ports
// ------
//  input  hclk:  
//              The input clock from the clock generators  is fed into this module.
//
//  output oclk:  
//              The output clock generated by this module which is gated based
//              on the parameters set through the API. 
//
//
// Programmable API:
// -----------------
//   function void v_setClockGateHi ();
//             This functions sets the clock gate to high. This implies
//             that the generated clock signal will be set to high till
//             the disableClockGating function is called.
//
//   function void v_setClockGateLo ();
//             This functions sets the clock gate to low. This implies
//             that the generated clock signal will be set to low till
//             the disableClockGating function is called.
//
//   function void v_enableClockGating ();
//             This function enables clock gating. This function has
//             to be called prior to calling the v_setClockGateHi or
//             v_setClockGateLo functions.
// 
//   function void v_disableClockGating();
//             This function disnables clock gating. This function has
//             to be called to disable the clock gating enabled by
//             the other functions (i.e,  v_setClockGateHi or
//             v_setClockGateLo functions).
//
//________________________________________________________________________
//________________________________________________________________________


module ProgClockGater(input hclk, output oclk);
// pragma attribute ProgClockGater partition_module_xrtl
  
   bit gate_enable = 0;
   bit gate_hi = 0;
   bit gate_lo = 0;   

   bit t_oclk = 0;

   bit s_hi = 0;
   bit s_lo = 0;
   
   assign oclk = s_hi ? 1 : (s_lo ? 0: hclk);

   always @(posedge hclk)
     begin
	s_hi = gate_hi;
	s_lo = gate_lo;
     end


//________________________________________________________________________
//________________________________________________________________________
//
//   function void v_setClockGateHi ();
//             This functions sets the clock gate to high. This implies
//             that the generated clock signal will be set to high till
//             the disableClockGating function is called.
// 
//________________________________________________________________________
//________________________________________________________________________
   export "DPI-C" function v_setClockGateHi;
   function void v_setClockGateHi ();
      begin
	 if (gate_enable) begin
	    gate_lo = 0;
	    gate_hi = 1;
	 end
         $display($time,, "Setting ClkGateHi to %b  %b %b \n", gate_enable, gate_hi, gate_lo);	 
      end
   endfunction // setClockGateHi
   
//________________________________________________________________________
//________________________________________________________________________
//
//   function void v_enableClockGating ();
//             This function enables clock gating. This function has
//             to be called prior to calling the v_setClockGateHi or
//             v_setClockGateLo functions.
//
//________________________________________________________________________
//________________________________________________________________________

  export "DPI-C" function v_enableClockGating;
   function void v_enableClockGating ();
      begin
	 gate_enable = 1;
      end
      $display($time,, "Enable Clock Gating %b  %b %b \n", gate_enable, gate_hi, gate_lo);	       
      
   endfunction
	
//________________________________________________________________________
//________________________________________________________________________
//   
//
//   function void v_disableClockGating();
//             This function disnables clock gating. This function has
//             to be called to disable the clock gating enabled by
//             the other functions (i.e,  v_setClockGateHi or
//             v_setClockGateLo functions).
//   
//________________________________________________________________________
//________________________________________________________________________
//

  export "DPI-C" function v_disableClockGating;
  function void v_disableClockGating();
      begin
	 gate_enable = 0;
	 gate_lo = 0;
	 gate_hi = 0;
	 
      end
      $display($time,, "Disable Clock Gating %b  %b %b \n", gate_enable, gate_hi, gate_lo);	             
   endfunction // disableClockGate
   
//________________________________________________________________________
//________________________________________________________________________
//      
//   function void v_setClockGateLo ();
//             This functions sets the clock gate to low. This implies
//             that the generated clock signal will be set to low till
//             the disableClockGating function is called.
//
//________________________________________________________________________
//________________________________________________________________________

  export "DPI-C" function v_setClockGateLo;
  function void v_setClockGateLo ();
      begin
	 if (gate_enable) begin
	    gate_lo = 1;
	    gate_hi = 0;
	 end
         $display($time,, "Setting ClkGateLo to %b  %b %b \n", gate_enable, gate_hi, gate_lo);	 	 
      end
   endfunction // setClockGateLo
   


endmodule // ClockGater

//------------------------------------------------------------------------
// Top-level clock driver module
//------------------------------------------------------------------------

module clock_bfm(
	output clk,
	output rst ); // pragma attribute qvif_clock_driver partition_module_xrtl


   // ----------------------------------------------------------------
   // -- Component Instantiations
   // ----------------------------------------------------------------

   // ----------------------------------------------------------------
   // -- ClkRstDriver
   // ----------------------------------------------------------------
   ClkRstDriver
      #(
        .CLK_INITIAL_VALUE(0),
        .CLK_INITIAL_OFFSET(10ns),
        .CLK_INITIAL_HI(5ns),
        .CLK_INITIAL_LO(5ns),
        .RESET_ACTIVE_LOW(1),
        .NUM_RESET_CYCLES(20)
       )
      intf1 (
        .gclock(clk),
        .reset(rst)
      );


endmodule

